.titv <- as.factor(c("ti", "tv", "ti", "tv", "tv", "ti", "tv", "tv", "ti", "tv",
                    "tv", "ti", "tv", "ti", "tv", "ti", "tv", "tv", "ti", "tv",
                    "ti", "tv", "ti", "tv", "tv", "ti", "tv", "tv", "ti", "tv",
                    "tv", "ti", "tv", "ti", "tv", "ti", "tv", "tv", "ti", "tv"))
.iub <- c("A", "C", "G", "T", "M", "R", "W", "S", "Y", "K")
.titv.df <- matrix(.titv, ncol=4)
colnames(.titv.df) <- .iub[1:4]
rownames(.titv.df) <- .iub


read.diBayes.gff <- function(file) {
    gff <- import.gff(file)
    ## dbSNP function codes: Locus region = 1; Coding = 2; Coding-synon
    ## = 3; Coding-nonsynon = 4; mRNA-UTR = 5; Intron = 6; Splice-site
    ## = 7; Contig-reference = 8; Coding-exception = 9; NearGene-3 =
    ## 13; NearGene-5 = 15; Coding-nonsynonymous nonsense = 41;
    ## Coding-nonsynonymous missense = 42; Coding-nonsynonymous
    ## frameshift = 44; Coding-nonsynonymous cds-indel = 45; UTR-3 =
    ## 53; UTR-5 = 55; Splice-3 = 73; Splice-3 = 75.
    fc <- do.call("c", lapply(strsplit(gsub("[A-Za-z0-9\\-\\.]+[:\\-]", "", gff$functionCode), ","), function(x) { paste(as.vector(unique(sort(x))), collapse=",")}))
    fc[fc==""] <- "NA"
    gff$funccode <- factor(fc)
    gff$titv <- mapply(function(x,y) {.titv.df[x,y]}, gff$genotype, gff$reference)
    class(gff) <- c("diBayes")
    gff
}

